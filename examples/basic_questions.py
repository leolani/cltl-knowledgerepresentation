"""
THIS SCRIPT SHOWCASES THE RESULTS GENERATED BY THE BRAIN AS QUESTIONS COME IN.
FOR MORE INFORMATION ON WHAT INFORMATION PLEASE REFER TO cltl.brain.utils.base_cases
"""

import argparse
import json
from pathlib import Path
from tempfile import TemporaryDirectory

from tqdm import tqdm

from cltl.brain.long_term_memory import LongTermMemory
from cltl.brain.utils.base_cases import questions
from cltl.brain.utils.helper_functions import brain_response_to_json


def main(log_path):
    # Create brain connection
    brain = LongTermMemory(address="http://localhost:7200/repositories/sandbox",
                           log_dir=log_path,
                           clear_all=False)

    data = []
    for (context_capsule, question_capsules) in tqdm([questions]):
        print(f"\n\n---------------------------------------------------------------\n")
        # Create context
        response = brain.capsule_context(context_capsule)

        for capsule in question_capsules:
            # Query information from the brain
            print(f"\n\n---------------------------------------------------------------\n")
            response = brain.query_brain(capsule)
            print(f"\n{capsule['triple']}\n")

            if not response['response']:
                print("No response")

            if response['response']:
                print(f"{len(response['response'])} responses")
                for r in response['response']:
                    print(f"\t{r['slabel']['value']} {r['pOriginal']['value'].split('/')[-1]} {r['olabel']['value']}"
                          f" by {r['authorlabels']['value']}, "
                          f"\tcertainty: {r['certaintyValue']['value']} polarity: {r['polarityValue']['value']} "
                          f"sentiment: {r['sentimentValue']['value']} emotion: {r['emotionValue']['value']}")

            response_json = brain_response_to_json(response)
            data.append(response_json)

    f = open("responses/basic-questions-responses.json", "w")
    json.dump(data, f)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Carl-Leolani scenario')
    parser.add_argument('--logs', type=str,
                        help="Directory to store the brain log files. Must be specified to persist the log files.")
    args, _ = parser.parse_known_args()

    if args.logs:
        main(Path(args.logs))
    else:
        with TemporaryDirectory(prefix="brain-log") as log_path:
            main(Path(log_path))
