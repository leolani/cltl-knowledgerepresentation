"""
THIS SCRIPT SHOWCASES THE THOUGHTS GENERATED BY THE BRAIN AS AN OBJECT IS IDENTIFIED THROUGH OBJECT RECOGNITION.
THERE ARE 2 TYPES OF THOUGHTS:
4: ENTITY NOVELTY: AWARENESS FOR SUBJECTS OR OBJECTS THAT WERE KNOWN ALREADY
6. OBJECT GAPS: LEARNING OPPORTUNITIES AROUND OBJECTS OF THE STATEMENT
"""

import argparse
import json
from pathlib import Path
from tempfile import TemporaryDirectory

from tqdm import tqdm

from cltl.brain.long_term_memory import LongTermMemory
from cltl.brain.utils.base_cases import mentions
from cltl.brain.utils.helper_functions import brain_response_to_json


def main(log_path):
    # Create brain connection
    brain = LongTermMemory(address="http://localhost:7200/repositories/sandbox",
                           log_dir=log_path,
                           clear_all=True)

    data = []
    for (context_capsule, experience_capsules) in tqdm([mentions]):
        print(f"\n\n---------------------------------------------------------------\n")
        # Create context
        response = brain.capsule_context(context_capsule)

        for capsule in experience_capsules:
            # Create mention and get thoughts
            print(f"\n\n---------------------------------------------------------------\n")
            response = brain.capsule_mention(capsule, return_thoughts=True, reason_types=True)
            print(f'\n{capsule["entity"]}\n')

            # Show different thoughts
            thoughts = response['thoughts']

            # Completeness thoughts
            print(f'\tobject gaps: {thoughts.complement_gaps()}')

            # Engagement
            print(f'\tentity novelty: {thoughts.entity_novelty()}')

            response_json = brain_response_to_json(response)
            data.append(response_json)

        f = open("responses/basic-mentions-responses.json", "w")
        json.dump(data, f)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Carl-Leolani scenario')
    parser.add_argument('--logs', type=str,
                        help="Directory to store the brain log files. Must be specified to persist the log files.")
    args, _ = parser.parse_known_args()

    if args.logs:
        main(Path(args.logs))
    else:
        with TemporaryDirectory(prefix="brain-log") as log_path:
            main(Path(log_path))
